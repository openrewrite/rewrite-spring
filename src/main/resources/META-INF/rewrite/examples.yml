# Copyright 2025 the original author or authors.
# <p>
# Licensed under the Moderne Source Available License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# <p>
# https://docs.moderne.io/licensing/moderne-source-available-license
# <p>
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.gradle.spring.AddSpringDependencyManagementPlugin
examples:
- description: ''
  sources:
  - before: |
      plugins {
          id "java"
          id "org.springframework.boot" version "1.5.22.RELEASE"
      }
      repositories {
          mavenCentral()
      }
      dependencyManagement { }
      dependencies {
          compile "org.springframework.boot:spring-boot-starter-web"
      }
    after: |
      plugins {
          id "java"
          id "org.springframework.boot" version "1.5.22.RELEASE"
          id "io.spring.dependency-management" version "1.0.6.RELEASE"
      }
      repositories {
          mavenCentral()
      }
      dependencyManagement { }
      dependencies {
          compile "org.springframework.boot:spring-boot-starter-web"
      }
    path: build.gradle
    language: groovy
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.flyway.MigrateToFlyway10
examples:
- description: ''
  sources:
  - before: "<project>\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\
      \t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.3.12</version>\n\
      \t\t<relativePath/>\n\t</parent>\n\t<groupId>com.example</groupId>\n\t<artifactId>demo</artifactId>\n\
      \t<version>0.0.1-SNAPSHOT</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\
      \t<groupId>org.flywaydb</groupId>\n\t\t\t<artifactId>flyway-core</artifactId>\n\
      \t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.postgresql</groupId>\n\
      \t\t\t<artifactId>postgresql</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t\
      </dependency>\n\t</dependencies>\n</project>\n"
    after: "<project>\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\
      \t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.3.12</version>\n\
      \t\t<relativePath/>\n\t</parent>\n\t<groupId>com.example</groupId>\n\t<artifactId>demo</artifactId>\n\
      \t<version>0.0.1-SNAPSHOT</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\
      \t<groupId>org.flywaydb</groupId>\n\t\t\t<artifactId>flyway-core</artifactId>\n\
      \t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.flywaydb</groupId>\n\
      \t\t\t<artifactId>flyway-database-postgresql</artifactId>\n\t\t</dependency>\n\
      \t\t<dependency>\n\t\t\t<groupId>org.postgresql</groupId>\n\t\t\t<artifactId>postgresql</artifactId>\n\
      \t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t</dependencies>\n</project>\n"
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.AddSpringProperty
examples:
- description: ''
  parameters:
  - server.servlet.path
  - /tmp/my-server-path
  - 'null'
  - List.of("*")
  sources:
  - before: |
      server.port=8080
    after: |
      server.port=8080
      server.servlet.path=/tmp/my-server-path
    language: properties
  - before: |
      server:
        port: 8080
    after: |
      server:
        port: 8080
        servlet:
          path: /tmp/my-server-path
    language: yaml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.ChangeMethodParameter
examples:
- description: ''
  parameters:
  - foo.Foo#bar(..)
  - long
  - '0'
  sources:
  - before: |
      package foo;
      class Foo {
          void bar(int i) {
          }
      }
    after: |
      package foo;
      class Foo {
          void bar(long i) {
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.ChangeSpringPropertyKey
examples:
- description: ''
  parameters:
  - server.servlet-path
  - server.servlet.path
  - 'null'
  sources:
  - before: |
      server.servlet-path=/tmp/my-server-path
    after: |
      server.servlet.path=/tmp/my-server-path
    language: properties
  - before: |
      server:
        servlet-path: /tmp/my-server-path
    after: |
      server:
        servlet.path: /tmp/my-server-path
    language: yaml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.ChangeSpringPropertyValue
examples:
- description: ''
  parameters:
  - server.port
  - '8081'
  - 'null'
  - 'null'
  - 'null'
  sources:
  - before: server.port=8080
    after: server.port=8081
    language: properties
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.CommentOutSpringPropertyKey
examples:
- description: ''
  parameters:
  - server.port
  - This property has been removed.
  sources:
  - before: 'server.port: 8080'
    after: |
      # This property has been removed.
      # server.port: 8080
    language: yaml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.DeleteSpringProperty
examples:
- description: ''
  parameters:
  - server.servlet-path
  sources:
  - before: |
      server.servlet-path=/tmp/my-server-path
    language: properties
  - before: |
      server:
        servlet-path: /tmp/my-server-path
    language: yaml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.ExpandProperties
examples:
- description: ''
  parameters:
  - 'null'
  sources:
  - before: |
      management: test
      spring.application:
        name: main
        description: a description
    after: |
      management: test
      spring:
        application:
          name: main
          description: a description
    language: yaml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.ImplicitWebAnnotationNames
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;

      @RestController
      @RequestMapping("/users")
      public class UsersController {
          @GetMapping("/{id}")
          public ResponseEntity<String> getUser(@PathVariable("id") Long id,
                                                @PathVariable(required = false) Long p2,
                                                @PathVariable(value = "p3") Long anotherName) {
              System.out.println(anotherName);
          }
      }
    after: |
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;

      @RestController
      @RequestMapping("/users")
      public class UsersController {
          @GetMapping("/{id}")
          public ResponseEntity<String> getUser(@PathVariable Long id,
                                                @PathVariable(required = false) Long p2,
                                                @PathVariable(value = "p3") Long anotherName) {
              System.out.println(anotherName);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.NoRepoAnnotationOnRepoInterface
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.stereotype.Repository;

      @Repository
      public interface MyRepo extends org.springframework.data.repository.Repository {
      }
    after: |2

      public interface MyRepo extends org.springframework.data.repository.Repository {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.NoRequestMappingAnnotation
examples:
- description: ''
  sources:
  - before: |
      import java.util.*;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.RequestMapping;
      import static org.springframework.web.bind.annotation.RequestMethod.GET;
      import static org.springframework.web.bind.annotation.RequestMethod.HEAD;

      @RestController
      @RequestMapping("/users")
      public class UsersController {
          @RequestMapping(method = HEAD)
          public ResponseEntity<List<String>> getUsersHead() {
              return null;
          }

          @RequestMapping(method = GET)
          public ResponseEntity<List<String>> getUsers() {
              return null;
          }

          @RequestMapping(path = "/{id}", method = RequestMethod.GET)
          public ResponseEntity<String> getUser(@PathVariable("id") Long id) {
              return null;
          }

          @RequestMapping
          public ResponseEntity<List<String>> getUsersNoRequestMethod() {
              return null;
          }
      }
    after: |
      import java.util.*;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.GetMapping;
      import org.springframework.web.bind.annotation.RequestMapping;
      import static org.springframework.web.bind.annotation.RequestMethod.HEAD;

      @RestController
      @RequestMapping("/users")
      public class UsersController {
          @RequestMapping(method = HEAD)
          public ResponseEntity<List<String>> getUsersHead() {
              return null;
          }

          @GetMapping
          public ResponseEntity<List<String>> getUsers() {
              return null;
          }

          @GetMapping("/{id}")
          public ResponseEntity<String> getUser(@PathVariable("id") Long id) {
              return null;
          }

          @RequestMapping
          public ResponseEntity<List<String>> getUsersNoRequestMethod() {
              return null;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.RenameBean
examples:
- description: ''
  parameters: &id001
  - sample.MyType
  - foo
  - bar
  sources:
  - before: |
      package sample;

      import org.springframework.context.annotation.Bean;
      import sample.MyType;

      class A {
          @Bean
          public MyType foo() {
              return new MyType();
          }
      }
    after: |
      package sample;

      import org.springframework.context.annotation.Bean;
      import sample.MyType;

      class A {
          @Bean
          public MyType bar() {
              return new MyType();
          }
      }
    language: java
- description: ''
  parameters:
  - sample.Foo
  - foo
  - bar
  sources:
  - before: |
      package sample;

      import org.springframework.context.annotation.Configuration;
      import sample.MyType;

      @Configuration
      class Foo {
      }
    after: |
      package sample;

      import org.springframework.context.annotation.Configuration;
      import sample.MyType;

      @Configuration
      class Bar {
      }
    language: java
- description: ''
  parameters: *id001
  sources:
  - before: |
      package sample;

      import org.springframework.beans.factory.annotation.Qualifier;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import sample.MyType;

      @Configuration
      class A {
          @Bean
          public String myBean(@Qualifier("foo") MyType myType) {
              return "";
          }
      }
    after: |
      package sample;

      import org.springframework.beans.factory.annotation.Qualifier;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import sample.MyType;

      @Configuration
      class A {
          @Bean
          public String myBean(@Qualifier("bar") MyType myType) {
              return "";
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.amqp.UseTlsAmqpConnectionString
examples:
- description: ''
  parameters:
  - 'null'
  - '5672'
  - '5671'
  - 'null'
  - 'null'
  sources:
  - before: |
      spring.rabbitmq.addresses=host1:5672
    after: |
      spring.rabbitmq.addresses=host1:5671
      spring.rabbitmq.ssl.enabled=true
    language: properties
  - before: |
      spring:
        rabbitmq:
          addresses: host1:5672
    after: |
      spring:
        rabbitmq:
          addresses: host1:5671
          ssl:
            enabled: true
    language: yaml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.batch.ConvertReceiveTypeWhenCallStepExecutionMethod
examples:
- description: ''
  sources:
  - before: |
      package test;

      import org.springframework.batch.core.JobExecution;
      import org.springframework.batch.core.StepExecution;
      public class ProfileUpdateWriter {

          private void populateJobMetrics(JobExecution jobExecution) {
            jobExecution.getStepExecutions().stream().map(StepExecution::getRollbackCount).mapToLong(Integer::longValue).sum();
          }

      }
    after: |
      package test;

      import org.springframework.batch.core.JobExecution;
      import org.springframework.batch.core.StepExecution;
      public class ProfileUpdateWriter {

          private void populateJobMetrics(JobExecution jobExecution) {
            jobExecution.getStepExecutions().stream().map(_stepExecution -> (int) _stepExecution.getRollbackCount()).mapToLong(Integer::longValue).sum();
          }

      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.batch.JobParameterToString
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.batch.core.JobParameters;

      class Foo {
          void foo(JobParameters jobParameters) throws Exception {
              jobParameters.getParameters().get("inputFile").toString();
          }
      }
    after: |
      import org.springframework.batch.core.JobParameters;

      class Foo {
          void foo(JobParameters jobParameters) throws Exception {
              jobParameters.getParameters().get("inputFile").getValue().toString();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.batch.ListenerSupportClassToInterface
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.batch.core.listener.ChunkListenerSupport;

      public class MyClass extends ChunkListenerSupport {

      }
    after: |
      import org.springframework.batch.core.ChunkListener;

      public class MyClass implements ChunkListener {

      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.batch.MigrateItemWriterWrite
examples:
- description: ''
  sources:
  - before: |
      import java.util.List;
      import org.springframework.batch.item.ItemWriter;

      public class ConsoleItemWriter<T> implements ItemWriter<T> {

          @Override
          public void write(final List<? extends T> items) throws Exception {
              for (final T item : items) {
                  System.out.println(item.toString());
              }
          }
      }
    after: |
      import org.springframework.batch.item.Chunk;
      import org.springframework.batch.item.ItemWriter;

      public class ConsoleItemWriter<T> implements ItemWriter<T> {

          @Override
          public void write(final Chunk<? extends T> items) throws Exception {
              for (final T item : items) {
                  System.out.println(item.toString());
              }
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.batch.MigrateJobBuilderFactory
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.batch.core.Job;
      import org.springframework.batch.core.Step;
      import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.context.annotation.Bean;

      public class MyJobConfig {

          @Autowired
          private JobBuilderFactory jobBuilderFactory;

          @Bean
          Job myJob(Step step) {
              return this.jobBuilderFactory.get("myJob")
                  .start(step)
                  .build();
          }
      }
    after: |
      import org.springframework.batch.core.Job;
      import org.springframework.batch.core.Step;
      import org.springframework.batch.core.job.builder.JobBuilder;
      import org.springframework.batch.core.repository.JobRepository;
      import org.springframework.context.annotation.Bean;

      public class MyJobConfig {

          @Bean
          Job myJob(Step step, JobRepository jobRepository) {
              return new JobBuilder("myJob", jobRepository)
                  .start(step)
                  .build();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.batch.MigrateJobParameter
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.batch.core.JobParameter;
      import org.springframework.batch.core.JobParameters;
      import java.util.Date;
      import java.util.Map;

      public class Foo {

          public void foo1() throws Exception {
              JobParameters jobParameters = new JobParameters(Map.of(
                      "inputFile", new JobParameter("TEST_INPUT_FILE"),
                      "emailId", new JobParameter(new Date()),
                      "pgpKey", new JobParameter(new Integer[]{1})
              ));
          }

      }
    after: |
      import org.springframework.batch.core.JobParameter;
      import org.springframework.batch.core.JobParameters;
      import java.util.Date;
      import java.util.Map;

      public class Foo {

          public void foo1() throws Exception {
              JobParameters jobParameters = new JobParameters(Map.of(
                      "inputFile", new JobParameter<>("TEST_INPUT_FILE", String.class),
                      "emailId", new JobParameter<>(new Date(), Date.class),
                      "pgpKey", new JobParameter<>(new Integer[]{1}, java.lang.Integer[].class)
              ));
          }

      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.batch.MigrateMethodAnnotatedByBatchAPI
examples:
- description: ''
  sources:
  - before: |
      import java.util.List;
      import org.springframework.batch.core.annotation.BeforeWrite;

      public class ProfileUpdateWriter {

          @BeforeWrite
          public void write(List<? extends List<String>> items) throws Exception {
              for (List<String> subList : items) {
              }
          }

      }
    after: |
      import java.util.List;
      import org.springframework.batch.core.annotation.BeforeWrite;
      import org.springframework.batch.item.Chunk;

      public class ProfileUpdateWriter {

          @BeforeWrite
          public void write(Chunk<? extends List<String>> _chunk) throws Exception {
              List<? extends List<String>> items = _chunk.getItems();
              for (List<String> subList : items) {
              }
          }

      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.batch.MigrateStepBuilderFactory
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.batch.core.Step;
      import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
      import org.springframework.batch.core.step.tasklet.Tasklet;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.context.annotation.Bean;

      class MyJobConfig {

          @Autowired
          private StepBuilderFactory stepBuilderFactory;

          @Bean
          Step myStep(Tasklet myTasklet) {
              return this.stepBuilderFactory.get("myStep")
                      .tasklet(myTasklet)
                      .build();
          }
      }
    after: |
      import org.springframework.batch.core.Step;
      import org.springframework.batch.core.repository.JobRepository;
      import org.springframework.batch.core.step.builder.StepBuilder;
      import org.springframework.batch.core.step.tasklet.Tasklet;
      import org.springframework.context.annotation.Bean;

      class MyJobConfig {

          @Bean
          Step myStep(Tasklet myTasklet, JobRepository jobRepository) {
              return new StepBuilder("myStep", jobRepository)
                      .tasklet(myTasklet)
                      .build();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.batch.RemoveDefaultBatchConfigurer
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer;
      class Foo extends DefaultBatchConfigurer {
          @Override
          public void setDataSource(javax.sql.DataSource dataSource) {
              // Datasource ignored; this method and comment should be removed
          }
      }
    after: |
      class Foo {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.batch.UpgradeSkipPolicyParameterType
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.batch.core.step.skip.SkipLimitExceededException;
      import org.springframework.batch.core.step.skip.SkipPolicy;

      public class MySkipPolicy implements SkipPolicy {
          @Override
          public boolean shouldSkip(Throwable throwable, int skipCount) {
              return true;
          }
      }
    after: |
      import org.springframework.batch.core.step.skip.SkipLimitExceededException;
      import org.springframework.batch.core.step.skip.SkipPolicy;

      public class MySkipPolicy implements SkipPolicy {
          @Override
          public boolean shouldSkip(Throwable throwable, long skipCount) {
              return true;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.AddConfigurationAnnotationIfBeansPresent
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.context.annotation.Bean;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

      @EnableWebSecurity
      class A {
        @Bean String hello() { return "hello"; }
      }
    after: |
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

      @Configuration
      @EnableWebSecurity
      class A {
        @Bean String hello() { return "hello"; }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.ConditionalOnBeanAnyNestedCondition
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
      import org.springframework.context.annotation.Bean;

      class ThingOne {}

      class ThingTwo {}

      class ConfigClass {
          @Bean
          @ConditionalOnBean({Aa.class, Bb.class})
          public ThingOne thingOne() {
              return new ThingOne();
          }
          @Bean
          @ConditionalOnBean({Bb.class, Aa.class})
          public ThingTwo thingTwo() {
              return new ThingTwo();
          }
      }
    after: |
      import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;
      import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Conditional;

      class ThingOne {}

      class ThingTwo {}

      class ConfigClass {
          @Bean
          @Conditional(ConditionAaOrBb.class)
          public ThingOne thingOne() {
              return new ThingOne();
          }

          @Bean
          @Conditional(ConditionAaOrBb.class)
          public ThingTwo thingTwo() {
              return new ThingTwo();
          }

          private static class ConditionAaOrBb extends AnyNestedCondition {
              ConditionAaOrBb() {
                  super(ConfigurationPhase.REGISTER_BEAN);
              }

              @ConditionalOnBean(Aa.class)
              class AaCondition {
              }

              @ConditionalOnBean(Bb.class)
              class BbCondition {
              }
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.DatabaseComponentAndBeanInitializationOrdering
examples:
- description: ''
  sources:
  - before: |
      import org.jooq.impl.DSL;
      import org.jooq.DSLContext;
      import org.jooq.SQLDialect;
      import javax.sql.DataSource;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.context.annotation.Bean;

      @Configuration
      class PersistenceConfiguration {

          public static class A { private DataSource ds;}

          @Bean
          DSLContext dslContext(DataSource ds) {
              return DSL.using(ds, SQLDialect.SQLITE);
          }

          @Bean
          A a() {
              return new A();
          }
      }
    after: |
      import org.jooq.impl.DSL;
      import org.springframework.boot.sql.init.dependency.DependsOnDatabaseInitialization;
      import org.jooq.DSLContext;
      import org.jooq.SQLDialect;
      import javax.sql.DataSource;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.context.annotation.Bean;

      @Configuration
      class PersistenceConfiguration {

          public static class A { private DataSource ds;}

          @Bean
          DSLContext dslContext(DataSource ds) {
              return DSL.using(ds, SQLDialect.SQLITE);
          }

          @Bean
          @DependsOnDatabaseInitialization
          A a() {
              return new A();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.GetErrorAttributes
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.web.servlet.error.ErrorAttributes;
      import org.springframework.web.context.request.WebRequest;

      import java.util.Map;

      class Test {
          private final ErrorAttributes errorAttributes;

          Test(ErrorAttributes errorAttributes) {
              this.errorAttributes = errorAttributes;
          }

          private Map<String, Object> getErrorAttributes(WebRequest webRequest) {
              return this.errorAttributes.getErrorAttributes(webRequest, true);
          }
      }
    after: |
      import org.springframework.boot.web.error.ErrorAttributeOptions;
      import org.springframework.boot.web.servlet.error.ErrorAttributes;
      import org.springframework.web.context.request.WebRequest;

      import java.util.Map;

      class Test {
          private final ErrorAttributes errorAttributes;

          Test(ErrorAttributes errorAttributes) {
              this.errorAttributes = errorAttributes;
          }

          private Map<String, Object> getErrorAttributes(WebRequest webRequest) {
              return this.errorAttributes.getErrorAttributes(webRequest, ErrorAttributeOptions.defaults().including(ErrorAttributeOptions.Include.STACK_TRACE));
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.HeadersConfigurerLambdaDsl
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class ConventionalSecurityConfig extends WebSecurityConfigurerAdapter {

          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                      .headers(headers -> headers
                               .contentSecurityPolicy("foobar"));
          }
      }
    after: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class ConventionalSecurityConfig extends WebSecurityConfigurerAdapter {

          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                      .headers(headers -> headers
                              .contentSecurityPolicy(policy -> policy
                                      .policyDirectives("foobar")));
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.HttpSecurityLambdaDsl
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class ConventionalSecurityConfig extends WebSecurityConfigurerAdapter {
          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                      .authorizeRequests()
                              .antMatchers("/blog/**").permitAll()
                              .anyRequest().authenticated();
          }
      }
    after: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class ConventionalSecurityConfig extends WebSecurityConfigurerAdapter {
          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                      .authorizeRequests(requests -> requests
                              .antMatchers("/blog/**").permitAll()
                              .anyRequest().authenticated());
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.MigrateActuatorMediaTypeToApiVersion
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.actuate.endpoint.http.ActuatorMediaType;
      import org.springframework.http.MediaType;

      class T {
          private static final MediaType actuatorMediaType2 = MediaType.parseMediaType(ActuatorMediaType.V2_JSON);
          private static final MediaType actuatorMediaType3 = MediaType.parseMediaType(ActuatorMediaType.V3_JSON);
      }
    after: |
      import org.springframework.boot.actuate.endpoint.ApiVersion;
      import org.springframework.http.MediaType;

      class T {
          private static final MediaType actuatorMediaType2 = MediaType.asMediaType(ApiVersion.V2.getProducedMimeType());
          private static final MediaType actuatorMediaType3 = MediaType.asMediaType(ApiVersion.V3.getProducedMimeType());
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.MigrateConfigurationPropertiesBindingPostProcessorValidatorBeanName
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor;

      class Test {
          static void method() {
              String value = ConfigurationPropertiesBindingPostProcessor.VALIDATOR_BEAN_NAME;
          }
      }
    after: |
      import org.springframework.boot.context.properties.EnableConfigurationProperties;

      class Test {
          static void method() {
              String value = EnableConfigurationProperties.VALIDATOR_BEAN_NAME;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.MigrateDatabaseCredentials
examples:
- description: ''
  sources:
  - before: |
      spring:
        liquibase:
          url: host
    after: |
      spring.liquibase:
        url: host
        username: ${spring.datasource.username}
        password: ${spring.datasource.password}
    language: yaml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.MigrateDiskSpaceHealthIndicatorConstructor
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.actuate.system.DiskSpaceHealthIndicator;

      class Test {
          void method() {
              DiskSpaceHealthIndicator literal = new DiskSpaceHealthIndicator(null, 1L);
              DiskSpaceHealthIndicator methodInvocation = new DiskSpaceHealthIndicator(null, value());
              Long arg = 10L;
              DiskSpaceHealthIndicator variable = new DiskSpaceHealthIndicator(null, arg);
          }
          long value() {
              return 10L;
          }
      }
    after: |
      import org.springframework.boot.actuate.system.DiskSpaceHealthIndicator;
      import org.springframework.util.unit.DataSize;

      class Test {
          void method() {
              DiskSpaceHealthIndicator literal = new DiskSpaceHealthIndicator(null, DataSize.ofBytes(1L));
              DiskSpaceHealthIndicator methodInvocation = new DiskSpaceHealthIndicator(null, DataSize.ofBytes(value()));
              Long arg = 10L;
              DiskSpaceHealthIndicator variable = new DiskSpaceHealthIndicator(null, DataSize.ofBytes(arg));
          }
          long value() {
              return 10L;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.MigrateErrorPropertiesIncludeStackTraceConstants
examples:
- description: ''
  sources:
  - before: |
      package org.test;

      import org.springframework.boot.autoconfigure.web.ErrorProperties;

      class Test {
          void methodA() {
              ErrorProperties.IncludeStacktrace value = ErrorProperties.IncludeStacktrace.ON_TRACE_PARAM;
          }
      }
    after: |
      package org.test;

      import org.springframework.boot.autoconfigure.web.ErrorProperties;

      class Test {
          void methodA() {
              ErrorProperties.IncludeStacktrace value = ErrorProperties.IncludeStacktrace.ON_PARAM;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.MigrateHsqlEmbeddedDatabaseConnection
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;

      class A {
          void method() {
              EmbeddedDatabaseConnection edbc = EmbeddedDatabaseConnection.HSQL;
          }
      }
    after: |
      import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;

      class A {
          void method() {
              EmbeddedDatabaseConnection edbc = EmbeddedDatabaseConnection.HSQLDB;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.MigrateLoggingSystemPropertyConstants
examples:
- description: ''
  sources:
  - before: |
      package org.test;

      import org.springframework.boot.logging.LoggingSystemProperties;

      class Test {
          void method() {
              String valueA = LoggingSystemProperties.FILE_CLEAN_HISTORY_ON_START;
              String valueB = LoggingSystemProperties.FILE_MAX_HISTORY;
              String valueC = LoggingSystemProperties.FILE_MAX_SIZE;
              String valueD = LoggingSystemProperties.FILE_TOTAL_SIZE_CAP;
              String valueE = LoggingSystemProperties.ROLLING_FILE_NAME_PATTERN;
          }
      }
    after: |
      package org.test;

      import org.springframework.boot.logging.logback.LogbackLoggingSystemProperties;

      class Test {
          void method() {
              String valueA = LogbackLoggingSystemProperties.ROLLINGPOLICY_CLEAN_HISTORY_ON_START;
              String valueB = LogbackLoggingSystemProperties.ROLLINGPOLICY_MAX_HISTORY;
              String valueC = LogbackLoggingSystemProperties.ROLLINGPOLICY_MAX_FILE_SIZE;
              String valueD = LogbackLoggingSystemProperties.ROLLINGPOLICY_TOTAL_SIZE_CAP;
              String valueE = LogbackLoggingSystemProperties.ROLLINGPOLICY_FILE_NAME_PATTERN;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.MigrateMultipartConfigFactory
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.web.servlet.MultipartConfigFactory;

      class Test {
          void method() {
              MultipartConfigFactory factory = new MultipartConfigFactory();
              factory.setMaxFileSize(1);
              factory.setMaxFileSize("1");
              factory.setMaxRequestSize(1);
              factory.setMaxRequestSize("1");
              factory.setFileSizeThreshold(1);
              factory.setFileSizeThreshold("1");
          }
      }
    after: |
      import org.springframework.boot.web.servlet.MultipartConfigFactory;
      import org.springframework.util.unit.DataSize;

      class Test {
          void method() {
              MultipartConfigFactory factory = new MultipartConfigFactory();
              factory.setMaxFileSize(DataSize.ofBytes(1));
              factory.setMaxFileSize(DataSize.parse("1"));
              factory.setMaxRequestSize(DataSize.ofBytes(1));
              factory.setMaxRequestSize(DataSize.parse("1"));
              factory.setFileSizeThreshold(DataSize.ofBytes(1));
              factory.setFileSizeThreshold(DataSize.parse("1"));
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.MigrateRestTemplateBuilderTimeoutByInt
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.web.client.RestTemplateBuilder;
      import org.springframework.web.client.RestTemplate;

      class Test {
          RestTemplate template = new RestTemplateBuilder()
                  .setConnectTimeout(1)
                  .setReadTimeout(1)
                  .build();
      }
    after: |
      import org.springframework.boot.web.client.RestTemplateBuilder;
      import org.springframework.web.client.RestTemplate;

      import java.time.Duration;

      class Test {
          RestTemplate template = new RestTemplateBuilder()
                  .setConnectTimeout(Duration.ofMillis(1))
                  .setReadTimeout(Duration.ofMillis(1))
                  .build();
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.MigrateToWebServerFactoryCustomizer
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
      import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;

      public class CustomContainer implements EmbeddedServletContainerCustomizer {
          @Override
          public void customize(ConfigurableEmbeddedServletContainer container) {
              container.setPort(8080);
              container.setContextPath("");
           }
      }
    after: |
      import org.springframework.boot.web.server.WebServerFactoryCustomizer;
      import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;

      public class CustomContainer implements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {
          @Override
          public void customize(ConfigurableServletWebServerFactory container) {
              container.setPort(8080);
              container.setContextPath("");
           }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.ReplaceDeprecatedEnvironmentTestUtils
examples:
- description: ''
  sources:
  - before: |
      package com.mycompany;

      import org.springframework.context.annotation.AnnotationConfigApplicationContext;
      import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;

      public class MyClass {
          public void myMethod() {
              AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
              String pair = "pair";
              addEnvironment(context, pair);
          }
      }
    after: |
      package com.mycompany;

      import org.springframework.boot.test.util.TestPropertyValues;
      import org.springframework.context.annotation.AnnotationConfigApplicationContext;

      public class MyClass {
          public void myMethod() {
              AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
              String pair = "pair";
              TestPropertyValues.of(pair).applyTo(context);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.ReplaceExtendWithAndContextConfiguration
examples:
- description: ''
  sources:
  - before: |
      package org.example;

      import org.junit.jupiter.api.extension.ExtendWith;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.test.context.ContextConfiguration;
      import org.springframework.test.context.junit.jupiter.SpringExtension;

      @ExtendWith(SpringExtension.class)
      @ContextConfiguration(classes = ExampleClass.ExampleConfiguration.class)
      public class ExampleClass {
          @Configuration
          static class ExampleConfiguration {
          }
      }
    after: |
      package org.example;

      import org.springframework.context.annotation.Configuration;
      import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

      @SpringJUnitConfig(classes = ExampleClass.ExampleConfiguration.class)
      public class ExampleClass {
          @Configuration
          static class ExampleConfiguration {
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.RestTemplateBuilderRequestFactory
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.web.client.RestTemplateBuilder;
      import org.springframework.http.client.SimpleClientHttpRequestFactory;

      public class A {
          static {
              RestTemplateBuilder builder = new RestTemplateBuilder()
                      .requestFactory(new SimpleClientHttpRequestFactory());
          }
      }
    after: |
      import org.springframework.boot.web.client.RestTemplateBuilder;
      import org.springframework.http.client.SimpleClientHttpRequestFactory;

      public class A {
          static {
              RestTemplateBuilder builder = new RestTemplateBuilder()
                      .requestFactory(() -> new SimpleClientHttpRequestFactory());
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.ServerHttpSecurityLambdaDsl
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.context.annotation.Bean;
      import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
      import org.springframework.security.config.web.server.ServerHttpSecurity;
      import org.springframework.security.web.server.SecurityWebFilterChain;

      @EnableWebFluxSecurity
      public class SecurityConfig {
          @Bean
          SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
              http.authorizeExchange()
                      .pathMatchers("/blog/**").permitAll()
                      .anyExchange().authenticated();
              return http.build();
          }
      }
    after: |
      import org.springframework.context.annotation.Bean;
      import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
      import org.springframework.security.config.web.server.ServerHttpSecurity;
      import org.springframework.security.web.server.SecurityWebFilterChain;

      @EnableWebFluxSecurity
      public class SecurityConfig {
          @Bean
          SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
              http.authorizeExchange(exchange -> exchange
                      .pathMatchers("/blog/**").permitAll()
                      .anyExchange().authenticated());
              return http.build();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.SpringBootMavenPluginMigrateAgentToAgents
examples:
- description: ''
  sources:
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>org.openrewrite.example</groupId>
          <artifactId>my-app</artifactId>
          <version>1</version>
          <build>
              <plugins>
                  <plugin>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-maven-plugin</artifactId>
                      <configuration>
                          <agent>some/directory/here.jar</agent>
                      </configuration>
                  </plugin>
              </plugins>
          </build>
      </project>
    after: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>org.openrewrite.example</groupId>
          <artifactId>my-app</artifactId>
          <version>1</version>
          <build>
              <plugins>
                  <plugin>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-maven-plugin</artifactId>
                      <configuration>
                          <agents>some/directory/here.jar</agents>
                      </configuration>
                  </plugin>
              </plugins>
          </build>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.SpringBootProperties_2_4
examples:
- description: ''
  sources:
  - before: test
    language: mavenProject
  - before: |
      # application.properties
      spring.profiles.active=production
      spring.profiles=dev
    after: |
      # application.properties
      spring.profiles.active=production
      spring.config.activate.on-profile=dev
    language: properties
  - before: |2
          ---
          spring:
            profiles:
              active: dev
          ---
          spring:
            profiles: prod
    after: |2
          ---
          spring:
            profiles:
              active: dev
          ---
          spring:
            config.activate.on-profile: prod
    language: yaml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.UnnecessarySpringExtension
examples:
- description: ''
  sources:
  - before: |
      import org.junit.jupiter.api.extension.ExtendWith;
      import org.springframework.boot.test.context.SpringBootTest;
      import org.springframework.test.context.junit.jupiter.SpringExtension;

      @SpringBootTest
      @ExtendWith(SpringExtension.class)
      class Test {
      }
    after: |
      import org.springframework.boot.test.context.SpringBootTest;

      @SpringBootTest
      class Test {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.UpgradeSpringBoot_2_5
examples:
- description: ''
  sources:
  - before: |
      <project>
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.example</groupId>
        <artifactId>demo</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <dependencies>
          <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.30</version>
            <scope>runtime</scope>
          </dependency>
        </dependencies>
      </project>
    after: |
      <project>
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.example</groupId>
        <artifactId>demo</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <dependencies>
          <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>8.0.33</version>
            <scope>runtime</scope>
          </dependency>
        </dependencies>
      </project>
    path: pom.xml
    language: xml
- description: ''
  sources:
  - before: |
      plugins {
        id 'java'
      }

      repositories {
         mavenCentral()
      }

      dependencies {
          runtimeOnly 'mysql:mysql-connector-java:8.0.30'
      }
      tasks.withType(Test).configureEach {
          useJUnitPlatform()
      }
    after: |
      plugins {
        id 'java'
      }

      repositories {
         mavenCentral()
      }

      dependencies {
          runtimeOnly 'com.mysql:mysql-connector-j:8.0.33'
      }
      tasks.withType(Test).configureEach {
          useJUnitPlatform()
      }
    path: build.gradle
    language: groovy
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot2.search.CustomizingJooqDefaultConfiguration
examples:
- description: ''
  sources:
  - before: |
      import org.jooq.conf.Settings;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.context.annotation.Bean;

      @Configuration
      class PersistenceConfiguration {

          @Bean
          Settings settings() {
              return null;
          }
      }
    after: |
      import org.jooq.conf.Settings;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.context.annotation.Bean;

      @Configuration
      class PersistenceConfiguration {

          /*~~>*/@Bean
          Settings settings() {
              return null;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.AddRouteTrailingSlash
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.web.bind.annotation.*;

      @RestController
      public class ExampleController {

          @GetMapping("/get")
          public String getExample() {
              return "This is a GET example.";
          }
      }
    after: |
      import org.springframework.web.bind.annotation.*;

      @RestController
      public class ExampleController {

          @GetMapping({"/get", "/get/"})
          public String getExample() {
              return "This is a GET example.";
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.AddSetUseTrailingSlashMatch
examples:
- description: ''
  sources:
  - before: |
      package com.example.demo;

      import org.springframework.context.annotation.Configuration;
      import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

      @Configuration
      public class MyWebConfiguration implements WebMvcConfigurer {
      }
    after: |
      package com.example.demo;

      import org.springframework.context.annotation.Configuration;
      import org.springframework.web.servlet.config.annotation.PathMatchConfigurer;
      import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

      @Configuration
      public class MyWebConfiguration implements WebMvcConfigurer {
          @Override
          public void configurePathMatch(PathMatchConfigurer configurer) {
              configurer.setUseTrailingSlashMatch(true);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.AddValidToNestedConfigProperties
examples:
- description: ''
  sources:
  - before: |
      package com.example.demo;

      import org.springframework.boot.context.properties.ConfigurationProperties;
      import org.springframework.validation.annotation.Validated;

      @ConfigurationProperties("app")
      @Validated
      public class AppProperties {

          private String name;

          private NestedProperties nested;
      }
    after: |
      package com.example.demo;

      import jakarta.validation.Valid;
      import org.springframework.boot.context.properties.ConfigurationProperties;
      import org.springframework.validation.annotation.Validated;

      @ConfigurationProperties("app")
      @Validated
      public class AppProperties {

          private String name;

          @Valid
          private NestedProperties nested;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.ConfigurationOverEnableSecurity
examples:
- description: ''
  parameters:
  - 'false'
  sources:
  - before: |
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

      @EnableWebSecurity
      class A {}
    after: |
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

      @Configuration
      @EnableWebSecurity
      class A {}
    language: java
- description: ''
  parameters:
  - 'true'
  sources:
  - before: |
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

      @EnableWebSecurity
      class A {}
    after: |
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

      @Configuration
      @EnableWebSecurity
      class A {}
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.DowngradeServletApiWhenUsingJetty
examples:
- description: ''
  sources:
  - before: |
      <project>
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.example</groupId>
        <artifactId>demo</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <name>demo</name>
        <description>Demo project for Spring Boot</description>
        <properties>
          <java.version>17</java.version>
        </properties>
        <dependencies>
          <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jetty</artifactId>
            <version>3.0.1</version>
          </dependency>
        </dependencies>
      </project>
    after: |
      <project>
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.example</groupId>
        <artifactId>demo</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <name>demo</name>
        <description>Demo project for Spring Boot</description>
        <properties>
          <jakarta-servlet.version>5.0.0</jakarta-servlet.version>
          <java.version>17</java.version>
        </properties>
        <dependencies>
          <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jetty</artifactId>
            <version>3.0.1</version>
          </dependency>
        </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.EnableVirtualThreads
examples:
- description: ''
  sources:
  - after: |
      spring.threads.virtual.enabled=true
    language: properties
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.MaintainTrailingSlashURLMappings
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.web.bind.annotation.*;

      @RestController
      public class ExampleController {

          @GetMapping("/get")
          public String getExample() {
              return "This is a GET example.";
          }
      }
    after: |
      import org.springframework.web.bind.annotation.*;

      @RestController
      public class ExampleController {

          @GetMapping({"/get", "/get/"})
          public String getExample() {
              return "This is a GET example.";
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.MigrateMaxHttpHeaderSize
examples:
- description: ''
  sources:
  - before: test
    language: mavenProject
  - before: |
      # application.properties
      server.max-http-header-size=10KB
    after: |
      # application.properties
      server.max-http-request-header-size=10KB
    language: properties
  - before: |2
          server:
            max-http-header-size: 10KB
    after: |2
          server:
            max-http-request-header-size: 10KB
    language: yaml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.MigrateWebMvcTagsToObservationConvention
examples:
- description: ''
  sources:
  - before: |
      import io.micrometer.core.instrument.Tag;
      import io.micrometer.core.instrument.Tags;
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.servlet.http.HttpServletResponse;
      import org.springframework.boot.actuate.metrics.web.servlet.WebMvcTags;
      import org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider;

      class CustomWebMvcTagsProvider implements WebMvcTagsProvider {

          @Override
          public Iterable<Tag> getTags(HttpServletRequest request, HttpServletResponse response, Object handler, Throwable exception) {
              Tags tags = Tags.of(WebMvcTags.method(request), WebMvcTags.uri(request, response), WebMvcTags.status(response), WebMvcTags.outcome(response));

              String customHeader = request.getHeader("X-Custom-Header");
              if (customHeader != null) {
                  tags = tags.and("custom.header", customHeader);
              }
              return tags;
          }
      }
    after: |
      import io.micrometer.common.KeyValue;
      import io.micrometer.common.KeyValues;
      import jakarta.servlet.http.HttpServletRequest;
      import org.springframework.http.server.observation.DefaultServerRequestObservationConvention;
      import org.springframework.http.server.observation.ServerRequestObservationContext;

      class CustomWebMvcTagsProvider extends DefaultServerRequestObservationConvention {

          @Override
          public KeyValues getHighCardinalityKeyValues(ServerRequestObservationContext context) {
              HttpServletRequest request = context.getCarrier();
              KeyValues values = super.getHighCardinalityKeyValues(context);

              String customHeader = request.getHeader("X-Custom-Header");
              if (customHeader != null) {
                  values.and(KeyValue.of("custom.header", customHeader));
              }
              return values;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.PreciseBeanType
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.context.annotation.Bean;
      import java.util.List;
      import java.util.ArrayList;

      class A {
          @Bean
          List bean1() {
              return new ArrayList();
          }
      }
    after: |
      import org.springframework.context.annotation.Bean;
      import java.util.ArrayList;

      class A {
          @Bean
          ArrayList bean1() {
              return new ArrayList();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.RemoveConstructorBindingAnnotation
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.context.properties.ConfigurationProperties;
      import org.springframework.boot.context.properties.ConstructorBinding;

      @ConfigurationProperties
      @ConstructorBinding
      class A {
          void method() {
          }
      }
    after: |
      import org.springframework.boot.context.properties.ConfigurationProperties;

      @ConfigurationProperties
      class A {
          void method() {
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.RemoveEnableBatchProcessing
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
      import org.springframework.boot.autoconfigure.SpringBootApplication;

      @SpringBootApplication
      @EnableBatchProcessing
      public class Application {
      }
    after: |
      import org.springframework.boot.autoconfigure.SpringBootApplication;

      @SpringBootApplication
      public class Application {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.RemoveSolrAutoConfigurationExclude
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
      import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;

      @SpringBootApplication(exclude = { SecurityAutoConfiguration.class, SolrAutoConfiguration.class })
      public class Application {
      }
    after: |
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;

      @SpringBootApplication(exclude = {SecurityAutoConfiguration.class})
      public class Application {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.ReplaceMockBeanAndSpyBean
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.test.mock.mockito.MockBean;

      public class SomeTest {
          @MockBean
          private String someService;
      }
    after: |
      import org.springframework.test.context.bean.override.mockito.MockitoBean;

      public class SomeTest {
          @MockitoBean
          private String someService;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.ReplaceRestTemplateBuilderMethods
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.web.client.RestTemplateBuilder;

      class Example {
          public void configure(RestTemplateBuilder builder) {
              builder.setConnectTimeout(java.time.Duration.ofSeconds(10));
          }
      }
    after: |
      import org.springframework.boot.web.client.RestTemplateBuilder;

      class Example {
          public void configure(RestTemplateBuilder builder) {
              builder.connectTimeout(java.time.Duration.ofSeconds(10));
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_0
examples:
- description: ''
  sources:
  - before: |
      package org.springframework.samples.petclinic.vet;

      import java.io.Serializable;

      import javax.persistence.Column;
      import javax.persistence.Entity;
      import javax.persistence.GeneratedValue;
      import javax.persistence.GenerationType;
      import javax.persistence.Id;
      import javax.persistence.Table;

      @Entity
      @Table(name = "specialties")
      public class Specialty implements Serializable {

          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Integer id;

          @Column(name = "name")
          private String name;

          public Integer getId() {
              return id;
          }

          public void setId(Integer id) {
              this.id = id;
          }

          public boolean isNew() {
              return this.id == null;
          }


          public String getName() {
              return this.name;
          }

          public void setName(String name) {
              this.name = name;
          }


      }
    after: |
      package org.springframework.samples.petclinic.vet;

      import java.io.Serializable;

      import jakarta.persistence.Column;
      import jakarta.persistence.Entity;
      import jakarta.persistence.GeneratedValue;
      import jakarta.persistence.GenerationType;
      import jakarta.persistence.Id;
      import jakarta.persistence.Table;

      @Entity
      @Table(name = "specialties")
      public class Specialty implements Serializable {

          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Integer id;

          @Column(name = "name")
          private String name;

          public Integer getId() {
              return id;
          }

          public void setId(Integer id) {
              this.id = id;
          }

          public boolean isNew() {
              return this.id == null;
          }


          public String getName() {
              return this.name;
          }

          public void setName(String name) {
              this.name = name;
          }


      }
    language: java
  - before: |
      package org.springframework.samples.petclinic.vet;

      import java.io.Serializable;
      import java.util.ArrayList;
      import java.util.Collections;
      import java.util.HashSet;
      import java.util.List;
      import java.util.Set;

      import javax.persistence.Column;
      import javax.persistence.Entity;
      import javax.persistence.FetchType;
      import javax.persistence.GeneratedValue;
      import javax.persistence.GenerationType;
      import javax.persistence.Id;
      import javax.persistence.JoinColumn;
      import javax.persistence.JoinTable;
      import javax.persistence.ManyToMany;
      import javax.persistence.Table;
      import javax.validation.constraints.NotEmpty;
      import javax.xml.bind.annotation.XmlElement;

      @Entity
      @Table(name = "vets")
      public class Vet implements Serializable {

          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Integer id;

          @Column(name = "name")
          private String name;

          @Column(name = "first_name")
          @NotEmpty
          private String firstName;

          @Column(name = "last_name")
          @NotEmpty
          private String lastName;

          @ManyToMany(fetch = FetchType.EAGER)
          @JoinTable(name = "vet_specialties", joinColumns = @JoinColumn(name = "vet_id"),
                  inverseJoinColumns = @JoinColumn(name = "specialty_id"))
          private Set<Specialty> specialties;

          public Integer getId() {
              return id;
          }

          public void setId(Integer id) {
              this.id = id;
          }

          public boolean isNew() {
              return this.id == null;
          }

          public String getName() {
              return this.name;
          }

          public void setName(String name) {
              this.name = name;
          }

          protected Set<Specialty> getSpecialtiesInternal() {
              if (this.specialties == null) {
                  this.specialties = new HashSet<>();
              }
              return this.specialties;
          }

          protected void setSpecialtiesInternal(Set<Specialty> specialties) {
              this.specialties = specialties;
          }

          @XmlElement
          public List<Specialty> getSpecialties() {
              List<Specialty> sortedSpecs = new ArrayList<>(getSpecialtiesInternal());
              return Collections.unmodifiableList(sortedSpecs);
          }

          public int getNrOfSpecialties() {
              return getSpecialtiesInternal().size();
          }

          public void addSpecialty(Specialty specialty) {
              getSpecialtiesInternal().add(specialty);
          }

          public String getFirstName() {
              return this.firstName;
          }

          public void setFirstName(String firstName) {
              this.firstName = firstName;
          }

          public String getLastName() {
              return this.lastName;
          }

          public void setLastName(String lastName) {
              this.lastName = lastName;
          }
      }
    after: |
      package org.springframework.samples.petclinic.vet;

      import java.io.Serializable;
      import java.util.ArrayList;
      import java.util.Collections;
      import java.util.HashSet;
      import java.util.List;
      import java.util.Set;

      import jakarta.persistence.Column;
      import jakarta.persistence.Entity;
      import jakarta.persistence.FetchType;
      import jakarta.persistence.GeneratedValue;
      import jakarta.persistence.GenerationType;
      import jakarta.persistence.Id;
      import jakarta.persistence.JoinColumn;
      import jakarta.persistence.JoinTable;
      import jakarta.persistence.ManyToMany;
      import jakarta.persistence.Table;
      import jakarta.validation.constraints.NotEmpty;
      import jakarta.xml.bind.annotation.XmlElement;

      @Entity
      @Table(name = "vets")
      public class Vet implements Serializable {

          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Integer id;

          @Column(name = "name")
          private String name;

          @Column(name = "first_name")
          @NotEmpty
          private String firstName;

          @Column(name = "last_name")
          @NotEmpty
          private String lastName;

          @ManyToMany(fetch = FetchType.EAGER)
          @JoinTable(name = "vet_specialties", joinColumns = @JoinColumn(name = "vet_id"),
                  inverseJoinColumns = @JoinColumn(name = "specialty_id"))
          private Set<Specialty> specialties;

          public Integer getId() {
              return id;
          }

          public void setId(Integer id) {
              this.id = id;
          }

          public boolean isNew() {
              return this.id == null;
          }

          public String getName() {
              return this.name;
          }

          public void setName(String name) {
              this.name = name;
          }

          protected Set<Specialty> getSpecialtiesInternal() {
              if (this.specialties == null) {
                  this.specialties = new HashSet<>();
              }
              return this.specialties;
          }

          protected void setSpecialtiesInternal(Set<Specialty> specialties) {
              this.specialties = specialties;
          }

          @XmlElement
          public List<Specialty> getSpecialties() {
              List<Specialty> sortedSpecs = new ArrayList<>(getSpecialtiesInternal());
              return Collections.unmodifiableList(sortedSpecs);
          }

          public int getNrOfSpecialties() {
              return getSpecialtiesInternal().size();
          }

          public void addSpecialty(Specialty specialty) {
              getSpecialtiesInternal().add(specialty);
          }

          public String getFirstName() {
              return this.firstName;
          }

          public void setFirstName(String firstName) {
              this.firstName = firstName;
          }

          public String getLastName() {
              return this.lastName;
          }

          public void setLastName(String lastName) {
              this.lastName = lastName;
          }
      }
    language: java
  - before: project
    language: mavenProject
  - before: |
      <project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>org.springframework.samples</groupId>
        <artifactId>spring-petclinic</artifactId>
        <version>2.7.3</version>

        <parent>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-parent</artifactId>
          <version>2.7.3</version>
        </parent>
        <name>petclinic</name>

        <properties>
          <java.version>1.8</java.version>
        </properties>

        <dependencies>
          <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
          </dependency>
          <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
          </dependency>
          <dependency>
            <groupId>org.ehcache</groupId>
            <artifactId>ehcache</artifactId>
          </dependency>
        </dependencies>
      </project>
    after: |
      <project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>org.springframework.samples</groupId>
        <artifactId>spring-petclinic</artifactId>
        <version>2.7.3</version>

        <parent>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-parent</artifactId>
          <version>3.0.13</version>
        </parent>
        <name>petclinic</name>

        <properties>
          <java.version>17</java.version>
        </properties>

        <dependencies>
          <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
          </dependency>
          <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
          </dependency>
          <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
          </dependency>
          <dependency>
            <groupId>org.ehcache</groupId>
            <artifactId>ehcache</artifactId>
            <classifier>jakarta</classifier>
          </dependency>
        </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_3
examples:
- description: ''
  sources:
  - before: project
    language: mavenProject
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example</groupId>
          <artifactId>fooservice</artifactId>
          <version>1.0-SNAPSHOT</version>
          <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>com.datastax.oss</groupId>
                      <artifactId>java-driver-bom</artifactId>
                      <version>4.17.0</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>
      </project>
    path: pom.xml
    language: xml
- description: ''
  sources:
  - before: project
    language: mavenProject
  - before: |
      <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example</groupId>
          <artifactId>fooservice</artifactId>
          <version>1.0-SNAPSHOT</version>
          <parent>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-parent</artifactId>
              <version>2.2.2.RELEASE</version>
              <relativePath/>
          </parent>
          <properties>
              <java.version>11</java.version>
              <spring-cloud.version>Hoxton.SR9</spring-cloud.version>
              <mockito.version>2.18.3</mockito.version>
          </properties>
          <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>org.springframework.cloud</groupId>
                      <artifactId>spring-cloud-dependencies</artifactId>
                      <version>${spring-cloud.version}</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.cloud2022.MigrateCloudSleuthToMicrometerTracing
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.cloud.sleuth.Tracer;

      public class SessionInfoOperator {
          private Tracer tracer;

          public SessionInfoOperator(Tracer tracer) {
              this.tracer = tracer;
          }

          public boolean getSessionInfo(String key) {
              return tracer.currentSpan().isNoop();
          }
      }
    after: |
      import io.micrometer.tracing.Tracer;

      public class SessionInfoOperator {
          private Tracer tracer;

          public SessionInfoOperator(Tracer tracer) {
              this.tracer = tracer;
          }

          public boolean getSessionInfo(String key) {
              return tracer.currentSpan().isNoop();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.cloud2022.MigrateRequestMappingOnFeignClient
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.cloud.openfeign.FeignClient;
      import org.springframework.web.bind.annotation.RequestMapping;
      import org.springframework.web.bind.annotation.RequestMethod;
      import org.springframework.web.bind.annotation.PathVariable;
      import org.springframework.web.bind.annotation.GetMapping;

      @FeignClient(name = "myService", url = "http://localhost:8080")
      @RequestMapping(path = "/posts")
      public interface MyServiceClient {

          @GetMapping(value = "/{postId}", produces = "application/json")
          String getPostById(@PathVariable("postId") Long postId);
      }
    after: |
      import org.springframework.cloud.openfeign.FeignClient;
      import org.springframework.web.bind.annotation.RequestMethod;
      import org.springframework.web.bind.annotation.PathVariable;
      import org.springframework.web.bind.annotation.GetMapping;

      @FeignClient(path = "/posts", name = "myService", url = "http://localhost:8080")
      public interface MyServiceClient {

          @GetMapping(value = "/{postId}", produces = "application/json")
          String getPostById(@PathVariable("postId") Long postId);
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.data.JdbcTemplateQueryForLongMigration
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.jdbc.core.JdbcTemplate;

      class Test {
          void test(JdbcTemplate jdbcTemplate) {
              String query = "SELECT COUNT(*) FROM table";
              Long count = jdbcTemplate.queryForLong(query);
          }
      }
    after: |
      import org.springframework.jdbc.core.JdbcTemplate;

      class Test {
          void test(JdbcTemplate jdbcTemplate) {
              String query = "SELECT COUNT(*) FROM table";
              Long count = jdbcTemplate.queryForObject(query, Long.class);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.data.MigrateAuditorAwareToOptional
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.data.domain.AuditorAware;

      public class MyAuditorAware implements AuditorAware<String> {
          @Override
          public String getCurrentAuditor() {
              return "admin";
          }
      }
    after: |
      import org.springframework.data.domain.AuditorAware;

      import java.util.Optional;

      public class MyAuditorAware implements AuditorAware<String> {
          @Override
          public Optional<java.lang.String> getCurrentAuditor() {
              return Optional.ofNullable("admin");
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.data.MigrateJpaSort
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.data.jpa.domain.JpaSort;
      import javax.persistence.metamodel.Attribute;

      class Test {
          Attribute<?, ?> attr;
          void test() {
              JpaSort onlyAttr = new JpaSort(attr);
          }
      }
    after: |
      import org.springframework.data.jpa.domain.JpaSort;
      import javax.persistence.metamodel.Attribute;

      class Test {
          Attribute<?, ?> attr;
          void test() {
              JpaSort onlyAttr = JpaSort.of(attr);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.data.MigrateQuerydslJpaRepository
examples:
- description: ''
  sources:
  - before: |
      import javax.persistence.EntityManager;
      import org.springframework.data.jpa.repository.support.JpaEntityInformation;
      import org.springframework.data.jpa.repository.support.QuerydslJpaRepository;
      import org.springframework.data.querydsl.SimpleEntityPathResolver;

      class Test {
          JpaEntityInformation<String, Long> entityInformation;
          EntityManager entityManager;
          SimpleEntityPathResolver resolver;
          QuerydslJpaRepository<String, Long> declWith2Args = new QuerydslJpaRepository(entityInformation, entityManager);
          QuerydslJpaRepository<String, Long> declWith3Args = new QuerydslJpaRepository(entityInformation, entityManager, resolver);
      }
    after: |
      import javax.persistence.EntityManager;
      import org.springframework.data.jpa.repository.support.JpaEntityInformation;
      import org.springframework.data.jpa.repository.support.QuerydslJpaPredicateExecutor;
      import org.springframework.data.querydsl.SimpleEntityPathResolver;

      class Test {
          JpaEntityInformation<String, Long> entityInformation;
          EntityManager entityManager;
          SimpleEntityPathResolver resolver;
          QuerydslJpaPredicateExecutor<String> declWith2Args = new QuerydslJpaPredicateExecutor(entityInformation, entityManager, SimpleEntityPathResolver.INSTANCE, null);
          QuerydslJpaPredicateExecutor<String> declWith3Args = new QuerydslJpaPredicateExecutor(entityInformation, entityManager, resolver, null);
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.data.UpgradeSpringData_2_3
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.data.mongodb.MongoDbFactory;
      import org.springframework.data.mongodb.core.SimpleMongoDbFactory;
      import com.mongodb.MongoClientURI;

      class Test {
          MongoDbFactory setupUri(String uri) {
              return new SimpleMongoDbFactory(new MongoClientURI(uri));
          }
      }
    after: |
      import org.springframework.data.mongodb.MongoDatabaseFactory;
      import org.springframework.data.mongodb.core.SimpleMongoClientDatabaseFactory;

      class Test {
          MongoDatabaseFactory setupUri(String uri) {
              return new SimpleMongoClientDatabaseFactory(uri);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.data.UseJpaRepositoryGetReferenceById
examples:
- description: ''
  sources:
  - before: |
      import foo.*;
      class A {
          BookRepository repo;
          void method(Long id) {
              repo.getById(id);
              repo.getOne(id);
          }
      }
    after: |
      import foo.*;
      class A {
          BookRepository repo;
          void method(Long id) {
              repo.getReferenceById(id);
              repo.getReferenceById(id);
          }
      }
    language: java
  - before: |
      package foo;
      import org.springframework.data.jpa.repository.JpaRepository;
      public interface BookRepository extends JpaRepository<Book, Long> {
      }
    language: java
  - before: |
      package foo;
      public class Book {}
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.data.UseTlsJdbcConnectionString
examples:
- description: ''
  parameters:
  - 'null'
  - '5021'
  - '15021'
  - sslConnection=true;
  sources:
  - before: |
      spring.datasource.url=jdbc:db2://10.2.1.101:5021/DB2INST1:currentSchema=DEV;commandTimeout=30;
    after: |
      spring.datasource.url=jdbc:db2://10.2.1.101:15021/DB2INST1:currentSchema=DEV;commandTimeout=30;sslConnection=true;
    language: properties
  - before: |
      spring:
        datasource:
          url: 'jdbc:db2://10.2.1.101:5021/DB2INST1:currentSchema=DEV;commandTimeout=30;'
    after: |
      spring:
        datasource:
          url: 'jdbc:db2://10.2.1.101:15021/DB2INST1:currentSchema=DEV;commandTimeout=30;sslConnection=true;'
    language: yaml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.doc.MigrateDocketBeanToGroupedOpenApiBean
examples:
- description: ''
  sources:
  - before: |
      package org.project.example;

      import org.springframework.context.annotation.Bean;
      import springfox.documentation.builders.PathSelectors;
      import springfox.documentation.builders.RequestHandlerSelectors;
      import springfox.documentation.spi.DocumentationType;
      import springfox.documentation.spring.web.plugins.Docket;

      class ApplicationConfiguration {
          @Bean
          public Docket publicApi() {
              return new Docket(DocumentationType.SWAGGER_2)
                      .select()
                      .apis(RequestHandlerSelectors.any())
                      .paths(PathSelectors.any())
                      .build()
                      .pathMapping("/");
          }
      }
    after: |
      package org.project.example;

      class ApplicationConfiguration {
      }
    language: java
  - before: |
      spring.application.name: main
    after: |
      spring.application.name: main
      springdoc:
        api-docs:
          path: /v3/api-docs
        swagger-ui:
          path: /swagger-ui.html
        paths-to-match: "/**"
    language: yaml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.doc.RemoveBeanValidatorPluginsConfiguration
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.context.annotation.Configuration;
      import org.springframework.context.annotation.Import;
      import springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;

      @Configuration
      @Import(BeanValidatorPluginsConfiguration.class)
      class ApplicationConfiguration {}
    after: |
      import org.springframework.context.annotation.Configuration;

      @Configuration
      class ApplicationConfiguration {}
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.BeanMethodReturnNull
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.context.annotation.Bean;

      class Test {
          @Bean
          public void myBean() {
          }
      }
    after: |
      import org.springframework.context.annotation.Bean;

      class Test {
          @Bean
          public Object myBean() {
              return null;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.EnvironmentAcceptsProfiles
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.core.env.Environment;

      class Test {
          static boolean method(Environment env) {
              return env.acceptsProfiles("production");
          }
      }
    after: |
      import org.springframework.core.env.Environment;
      import org.springframework.core.env.Profiles;

      class Test {
          static boolean method(Environment env) {
              return env.acceptsProfiles(Profiles.of("production"));
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.HttpComponentsClientHttpRequestFactoryReadTimeout
examples:
- description: ''
  sources:
  - before: |
      import org.apache.hc.core5.http.config.Registry;
      import org.apache.hc.core5.http.config.RegistryBuilder;
      import org.apache.hc.client5.http.socket.ConnectionSocketFactory;
      import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
      import org.springframework.boot.web.client.RestTemplateBuilder;
      import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
      import org.springframework.web.client.RestTemplate;

      class RestContextInitializer {
          RestTemplate getRestTemplate() throws Exception {
              Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create().build();
              PoolingHttpClientConnectionManager poolingConnectionManager = new PoolingHttpClientConnectionManager(socketFactoryRegistry);

              return new RestTemplateBuilder()
                      .requestFactory(() -> {
                          HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory();
                          clientHttpRequestFactory.setReadTimeout(30000);
                          // ... set poolingConnectionManager on HttpClient
                          return clientHttpRequestFactory;
                      })
                      .build();
          }
      }
    after: |
      import org.apache.hc.core5.http.config.Registry;
      import org.apache.hc.core5.http.config.RegistryBuilder;
      import org.apache.hc.core5.http.io.SocketConfig;
      import org.apache.hc.client5.http.socket.ConnectionSocketFactory;
      import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
      import org.springframework.boot.web.client.RestTemplateBuilder;
      import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
      import org.springframework.web.client.RestTemplate;

      import java.util.concurrent.TimeUnit;

      class RestContextInitializer {
          RestTemplate getRestTemplate() throws Exception {
              Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create().build();
              PoolingHttpClientConnectionManager poolingConnectionManager = new PoolingHttpClientConnectionManager(socketFactoryRegistry);
              poolingConnectionManager.setDefaultSocketConfig(SocketConfig.custom().setSoTimeout(30000, TimeUnit.MILLISECONDS).build());

              return new RestTemplateBuilder()
                      .requestFactory(() -> {
                          HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory();
                          // ... set poolingConnectionManager on HttpClient
                          return clientHttpRequestFactory;
                      })
                      .build();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateBase64Utils
examples:
- description: ''
  sources:
  - before: |
      import java.nio.charset.StandardCharsets;
      import org.springframework.util.Base64Utils;

      class Test {
          void test(byte[] bBytes) {
              String key = "abc";
              byte[] encoded1 = Base64Utils.encode(key.getBytes(StandardCharsets.UTF_8));
              byte[] decoded1 = Base64Utils.decode(key.getBytes(StandardCharsets.UTF_8));
              byte[] encoded2 = Base64Utils.encodeUrlSafe(key.getBytes(StandardCharsets.UTF_8));
              byte[] decoded2 = Base64Utils.decodeUrlSafe(key.getBytes(StandardCharsets.UTF_8));
              String encoded3 = Base64Utils.encodeToString(key.getBytes(StandardCharsets.UTF_8));
              byte[] decoded3 = Base64Utils.decodeFromString(key);
              String encoded4 = Base64Utils.encodeToUrlSafeString(key.getBytes(StandardCharsets.UTF_8));
              byte[] decoded4 = Base64Utils.decodeFromUrlSafeString(key);
          }
      }
    after: |
      import java.nio.charset.StandardCharsets;
      import java.util.Base64;

      class Test {
          void test(byte[] bBytes) {
              String key = "abc";
              byte[] encoded1 = Base64.getEncoder().encode(key.getBytes(StandardCharsets.UTF_8));
              byte[] decoded1 = Base64.getDecoder().decode(key.getBytes(StandardCharsets.UTF_8));
              byte[] encoded2 = Base64.getUrlEncoder().encode(key.getBytes(StandardCharsets.UTF_8));
              byte[] decoded2 = Base64.getUrlDecoder().decode(key.getBytes(StandardCharsets.UTF_8));
              String encoded3 = Base64.getEncoder().encodeToString(key.getBytes(StandardCharsets.UTF_8));
              byte[] decoded3 = Base64.getDecoder().decode(key);
              String encoded4 = Base64.getUrlEncoder().encodeToString(key.getBytes(StandardCharsets.UTF_8));
              byte[] decoded4 = Base64.getUrlDecoder().decode(key);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateHandlerInterceptor
examples:
- description: ''
  sources:
  - before: |
      import javax.servlet.http.*;

      import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
      import org.springframework.web.servlet.ModelAndView;

      class MyInterceptor extends HandlerInterceptorAdapter {
          @Override
          public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
              return super.preHandle(request, response, handler);
          }

          @Override
          public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
              super.postHandle(request, response, handler, modelAndView);
          }

          @Override
          public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
              super.afterCompletion(request, response, handler, ex);
          }
      }
    after: |
      import javax.servlet.http.*;

      import org.springframework.web.servlet.HandlerInterceptor;
      import org.springframework.web.servlet.ModelAndView;

      class MyInterceptor implements HandlerInterceptor {
          @Override
          public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
              return true;
          }

          @Override
          public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
          }

          @Override
          public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateHandlerResultHasExceptionHandlerMethod
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.web.reactive.HandlerResult;
      class MyHandler {
          void configureHandler(HandlerResult result) {
              if (result.hasExceptionHandler()) {
                  // do something
              }
          }
      }
    after: |
      import org.springframework.web.reactive.HandlerResult;
      class MyHandler {
          void configureHandler(HandlerResult result) {
              if (result.getExceptionHandler() != null) {
                  // do something
              }
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateHandlerResultSetExceptionHandlerMethod
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.web.reactive.HandlerResult;
      import reactor.core.publisher.Mono;

      class MyHandler {
          void configureHandler(HandlerResult result) {
              result.setExceptionHandler(ex -> Mono.empty());
          }
      }
    after: |
      import org.springframework.web.reactive.HandlerResult;
      import reactor.core.publisher.Mono;

      class MyHandler {
          void configureHandler(HandlerResult result) {
              result.setExceptionHandler((exchange, ex) -> Mono.empty());
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateInstantiationAwareBeanPostProcessorAdapter
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;

      class A extends InstantiationAwareBeanPostProcessorAdapter {
      }
    after: |
      import org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor;

      class A implements SmartInstantiationAwareBeanPostProcessor {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateMethodArgumentNotValidExceptionErrorMethod
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.context.MessageSource;
      import java.util.Locale;
      import org.springframework.web.bind.MethodArgumentNotValidException;
      import java.util.List;
      import java.util.Map;
      import org.springframework.validation.BindException;
      import org.springframework.validation.ObjectError;

      class A {
          public void handleValidationError(BindException bindException, MethodArgumentNotValidException methodArgumentNotValidException, MessageSource messageSource, Locale locale) {
              List<ObjectError> errors = bindException.getAllErrors();
              List<String> errorMessages = MethodArgumentNotValidException.errorsToStringList(errors, null, Locale.CANADA);
              Map<ObjectError, String> errorMessages = methodArgumentNotValidException.resolveErrorMessages(messageSource, locale);
          }
      }
    after: |
      import org.springframework.context.MessageSource;
      import java.util.Locale;
      import org.springframework.web.bind.MethodArgumentNotValidException;
      import org.springframework.web.util.BindErrorUtils;

      import java.util.List;
      import java.util.Map;
      import org.springframework.validation.BindException;
      import org.springframework.validation.ObjectError;

      class A {
          public void handleValidationError(BindException bindException, MethodArgumentNotValidException methodArgumentNotValidException, MessageSource messageSource, Locale locale) {
              List<ObjectError> errors = bindException.getAllErrors();
              List<String> errorMessages = BindErrorUtils.resolve(errors).values().stream().toList();
              Map<ObjectError, String> errorMessages = BindErrorUtils.resolve(methodArgumentNotValidException.getAllErrors(), messageSource, locale);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateResourceHttpMessageWriterAddHeadersMethod
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.web.reactive.HandlerResult;
      import org.springframework.http.ReactiveHttpOutputMessage;
      import org.springframework.core.io.Resource;
      import org.springframework.http.MediaType;
      import java.util.Map;
      import org.springframework.http.codec.ResourceHttpMessageWriter;

      class A {
          void writeResourceWithHeaders(ReactiveHttpOutputMessage message, Resource resource, MediaType contentType, Map<String, Object> hints) {
              ResourceHttpMessageWriter writer = new ResourceHttpMessageWriter();
              writer.addHeaders(message, resource, contentType, hints);
          }
      }
    after: |
      import org.springframework.web.reactive.HandlerResult;
      import org.springframework.http.ReactiveHttpOutputMessage;
      import org.springframework.core.io.Resource;
      import org.springframework.http.MediaType;
      import java.util.Map;
      import org.springframework.http.codec.ResourceHttpMessageWriter;

      class A {
          void writeResourceWithHeaders(ReactiveHttpOutputMessage message, Resource resource, MediaType contentType, Map<String, Object> hints) {
              ResourceHttpMessageWriter writer = new ResourceHttpMessageWriter();
              writer.addDefaultHeaders(message, resource, contentType, hints).block();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateResponseEntityExceptionHandlerHttpStatusToHttpStatusCode
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.http.HttpHeaders;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.context.request.WebRequest;
      import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

      class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

          @Override
          protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {
              // Imagine we log or manipulate the status here somehow
              return super.handleExceptionInternal(ex, body, headers, status, request);
          }
      }
    after: |
      import org.springframework.http.HttpHeaders;
      import org.springframework.http.HttpStatusCode;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.context.request.WebRequest;
      import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

      class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

          @Override
          protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body, HttpHeaders headers, HttpStatusCode status, WebRequest request) {
              // Imagine we log or manipulate the status here somehow
              return super.handleExceptionInternal(ex, body, headers, status, request);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateResponseStatusException
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.http.HttpStatus;
      import org.springframework.web.server.ResponseStatusException;

      class A {
          void foo(ResponseStatusException e) {
              HttpStatus i = e.getStatus();
          }
      }
    after: |
      import org.springframework.http.HttpStatusCode;
      import org.springframework.web.server.ResponseStatusException;

      class A {
          void foo(ResponseStatusException e) {
              HttpStatusCode i = e.getStatusCode();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateSpringAssert
examples:
- description: ''
  sources:
  - before: |
      class A {
          void test() {
              org.springframework.util.Assert.state(true);
              org.springframework.util.Assert.isTrue(true);
          }
      }
    after: |
      class A {
          void test() {
              org.springframework.util.Assert.state(true, "must be true");
              org.springframework.util.Assert.isTrue(true, "must be true");
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateUriComponentsBuilderMethods
examples:
- description: ''
  sources:
  - before: |
      import java.net.InetSocketAddress;
      import org.springframework.http.HttpRequest;
      import org.springframework.web.util.UriComponentsBuilder;

      class A {
          void test() {
              HttpRequest request;
              InetSocketAddress inetSocketAddress;
              UriComponentsBuilder.fromHttpRequest(request).queryParam("foo", "bar");
              UriComponentsBuilder.parseForwardedFor(request, inetSocketAddress);
          }
      }
    after: |
      import java.net.InetSocketAddress;
      import org.springframework.http.HttpRequest;
      import org.springframework.web.util.ForwardedHeaderUtils;

      class A {
          void test() {
              HttpRequest request;
              InetSocketAddress inetSocketAddress;
              ForwardedHeaderUtils.adaptFromForwardedHeaders(request.getURI(), request.getHeaders()).queryParam("foo", "bar");
              ForwardedHeaderUtils.parseForwardedFor(request.getURI(), request.getHeaders(), inetSocketAddress);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateUtf8MediaTypes
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.http.MediaType;

      class A {
          void method() {
              MediaType valueA = MediaType.APPLICATION_JSON_UTF8;
              String valueB = MediaType.APPLICATION_JSON_UTF8_VALUE;
              MediaType valueC = MediaType.APPLICATION_PROBLEM_JSON_UTF8;
              String valueD = MediaType.APPLICATION_PROBLEM_JSON_UTF8_VALUE;
          }
      }
    after: |
      import org.springframework.http.MediaType;

      class A {
          void method() {
              MediaType valueA = MediaType.APPLICATION_JSON;
              String valueB = MediaType.APPLICATION_JSON_VALUE;
              MediaType valueC = MediaType.APPLICATION_PROBLEM_JSON;
              String valueD = MediaType.APPLICATION_PROBLEM_JSON_VALUE;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateWebExchangeBindExceptionResolveErrorMethod
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.context.MessageSource;
      import java.util.Locale;
      import org.springframework.web.bind.support.WebExchangeBindException;
      import java.util.Map;
      import org.springframework.validation.ObjectError;

      class A {
          public void handleValidationError(WebExchangeBindException ex, MessageSource messageSource, Locale locale) {
              Map<ObjectError, String> errorMessages = ex.resolveErrorMessages(messageSource, locale);
          }
      }
    after: |
      import org.springframework.context.MessageSource;
      import java.util.Locale;
      import org.springframework.web.bind.support.WebExchangeBindException;
      import org.springframework.web.util.BindErrorUtils;

      import java.util.Map;
      import org.springframework.validation.ObjectError;

      class A {
          public void handleValidationError(WebExchangeBindException ex, MessageSource messageSource, Locale locale) {
              Map<ObjectError, String> errorMessages = BindErrorUtils.resolve(ex.getAllErrors(), messageSource, locale);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.framework.MigrateWebMvcConfigurerAdapter
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

      public class CustomMvcConfigurer extends WebMvcConfigurerAdapter {
          private final String someArg;
          public CustomMvcConfigurer(String someArg) {
              super();
              this.someArg = someArg;
          }
      }
    after: |
      import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

      public class CustomMvcConfigurer implements WebMvcConfigurer {
          private final String someArg;
          public CustomMvcConfigurer(String someArg) {
              this.someArg = someArg;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.kafka.KafkaTestUtilsDuration
examples:
- description: ''
  sources:
  - before: |
      import org.apache.kafka.clients.consumer.Consumer;
      import org.springframework.kafka.test.utils.KafkaTestUtils;

      class Foo {
          void bar(Consumer<String, String> consumer) {
              KafkaTestUtils.getRecords(consumer, 1000L);
              KafkaTestUtils.getRecords(consumer, 1000L, 1);
              KafkaTestUtils.getSingleRecord(consumer, "topic", 1000L);
              KafkaTestUtils.getOneRecord("topic", "key", "value", 1, true, true, 1000L);
          }
      }
    after: |
      import org.apache.kafka.clients.consumer.Consumer;
      import org.springframework.kafka.test.utils.KafkaTestUtils;

      import java.time.Duration;

      class Foo {
          void bar(Consumer<String, String> consumer) {
              KafkaTestUtils.getRecords(consumer, Duration.ofMillis(1000L));
              KafkaTestUtils.getRecords(consumer, Duration.ofMillis(1000L), 1);
              KafkaTestUtils.getSingleRecord(consumer, "topic", Duration.ofMillis(1000L));
              KafkaTestUtils.getOneRecord("topic", "key", "value", 1, true, true, Duration.ofMillis(1000L));
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.kafka.UpgradeSpringKafka_3_0
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.kafka.core.KafkaOperations;
      import org.springframework.kafka.support.SendResult;
      import org.springframework.util.concurrent.ListenableFuture;
      import org.springframework.util.concurrent.ListenableFutureCallback;

      class Foo {
          void bar(KafkaOperations<String, String> kafkaOperations) {
              ListenableFuture<SendResult<String,String>> future = kafkaOperations.send("topic", "key", "value");
              future.addCallback(new ListenableFutureCallback<>() {
                  @Override
                  public void onSuccess(SendResult<String, String> result) {
                      System.out.println(result.getRecordMetadata());
                  }

                  @Override
                  public void onFailure(Throwable ex) {
                      System.err.println(ex.getMessage());
                  }
              });
          }
      }
    after: |
      import org.springframework.kafka.core.KafkaOperations;
      import org.springframework.kafka.support.SendResult;

      import java.util.concurrent.CompletableFuture;

      class Foo {
          void bar(KafkaOperations<String, String> kafkaOperations) {
              CompletableFuture<SendResult<String,String>> future = kafkaOperations.send("topic", "key", "value");
              future.whenComplete((SendResult<String, String> result, Throwable ex) -> {
                  if (ex == null) {
                      System.out.println(result.getRecordMetadata());
                  } else {
                      System.err.println(ex.getMessage());
                  }
              });
          }
      }
    language: java
- description: ''
  sources:
  - before: |
      import org.springframework.kafka.core.KafkaTemplate;
      import org.springframework.kafka.core.KafkaOperations;
      import org.springframework.kafka.core.KafkaOperations2;
      import org.springframework.kafka.support.SendResult;
      import java.util.concurrent.CompletableFuture;

      class Foo {
          void bar(KafkaOperations<String, String> kafkaOperations) {
              KafkaOperations2<String, String> k2 = kafkaOperations.usingCompletableFuture();
          }
      }
    after: |
      import org.springframework.kafka.core.KafkaTemplate;
      import org.springframework.kafka.core.KafkaOperations;
      import org.springframework.kafka.support.SendResult;
      import java.util.concurrent.CompletableFuture;

      class Foo {
          void bar(KafkaOperations<String, String> kafkaOperations) {
              KafkaOperations<String, String> k2 = kafkaOperations;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.search.FindApiCalls
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.web.client.RestTemplate;
      class Test {
          RestTemplate restTemplate;
          void test() {
              restTemplate.getForObject(base() + "/getThing", String.class);
              restTemplate.postForEntity(base() + "/postThing", null, String.class);
          }

          String base() {
              return "https://base";
          }
      }
    after: |
      import org.springframework.web.client.RestTemplate;
      class Test {
          RestTemplate restTemplate;
          void test() {
              /*~~(GET base() + "/getThing")~~>*/restTemplate.getForObject(base() + "/getThing", String.class);
              /*~~(POST base() + "/postThing")~~>*/restTemplate.postForEntity(base() + "/postThing", null, String.class);
          }

          String base() {
              return "https://base";
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.search.FindApiEndpoints
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.stereotype.Controller;
      import org.springframework.web.bind.annotation.*;

      @Controller
      class PersonController {
          @GetMapping("/count")
          int count() {
            return 42;
          }
      }
    after: |
      import org.springframework.stereotype.Controller;
      import org.springframework.web.bind.annotation.*;

      @Controller
      class PersonController {
          /*~~(GET /count)~~>*/@GetMapping("/count")
          int count() {
            return 42;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security5.AuthorizeHttpRequests
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class SecurityConfig extends WebSecurityConfigurerAdapter {

          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                  .authorizeRequests()
                      .antMatchers("/blog/**").permitAll()
                      .anyRequest().authenticated()
                      .and()
                  .formLogin()
                      .loginPage("/login")
                      .permitAll()
                      .and()
                  .rememberMe();
          }
      }
    after: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class SecurityConfig extends WebSecurityConfigurerAdapter {

          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                  .authorizeHttpRequests()
                      .antMatchers("/blog/**").permitAll()
                      .anyRequest().authenticated()
                      .and()
                  .formLogin()
                      .loginPage("/login")
                      .permitAll()
                      .and()
                  .rememberMe();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security5.RenameNimbusdsJsonObjectPackageName
examples:
- description: ''
  sources:
  - before: |
      import com.nimbusds.jose.shaded.json.JSONObject;
      import com.nimbusds.jose.shaded.json.JSONValue;

      public class TutorialService {
        JSONObject dsl;
        JSONValue value;

        public JSONObject getDsl() {
          return dsl;
        }

        public JSONValue getValue() {
          return value;
        }
      }
    after: |
      import net.minidev.json.JSONObject;
      import net.minidev.json.JSONValue;

      public class TutorialService {
        JSONObject dsl;
        JSONValue value;

        public JSONObject getDsl() {
          return dsl;
        }

        public JSONValue getValue() {
          return value;
        }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security5.ReplaceGlobalMethodSecurityWithMethodSecurity
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;

      @EnableGlobalMethodSecurity(prePostEnabled = true)
      public class config {
      }
    after: |
      import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;

      @EnableMethodSecurity
      public class config {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security5.UpdateArgon2PasswordEncoder
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.crypto.argon2.Argon2PasswordEncoder;

      class T {
          void encoderWithDefaults() {
              Argon2PasswordEncoder encoder = new Argon2PasswordEncoder();
          }
      }
    after: |
      import org.springframework.security.crypto.argon2.Argon2PasswordEncoder;

      class T {
          void encoderWithDefaults() {
              Argon2PasswordEncoder encoder = Argon2PasswordEncoder.defaultsForSpringSecurity_v5_2();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security5.UpdatePbkdf2PasswordEncoder
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;

      class T {
          void encoderWithDefaults() {
              Pbkdf2PasswordEncoder encoder = new Pbkdf2PasswordEncoder();
          }
      }
    after: |
      import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;

      class T {
          void encoderWithDefaults() {
              Pbkdf2PasswordEncoder encoder = Pbkdf2PasswordEncoder.defaultsForSpringSecurity_v5_8();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security5.UpdateSCryptPasswordEncoder
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.crypto.scrypt.SCryptPasswordEncoder;

      class T {
          void encoderWithDefaults() {
              SCryptPasswordEncoder encoder = new SCryptPasswordEncoder();
          }
      }
    after: |
      import org.springframework.security.crypto.scrypt.SCryptPasswordEncoder;

      class T {
          void encoderWithDefaults() {
              SCryptPasswordEncoder encoder = SCryptPasswordEncoder.defaultsForSpringSecurity_v4_1();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security5.UpgradeSpringSecurity_5_7
examples:
- description: ''
  sources:
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>org.example</groupId>
          <artifactId>example</artifactId>
          <version>1.0-SNAPSHOT</version>
          <dependencies>
              <dependency>
                  <groupId>org.springframework.security</groupId>
                  <artifactId>spring-security-core</artifactId>
                  <version>5.6.0</version>
              </dependency>
              <dependency>
                  <groupId>org.springframework.security</groupId>
                  <artifactId>spring-security-oauth2-authorization-server</artifactId>
                  <version>0.2.0</version>
              </dependency>
          </dependencies>
      </project>
    after: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>org.example</groupId>
          <artifactId>example</artifactId>
          <version>1.0-SNAPSHOT</version>
          <dependencies>
              <dependency>
                  <groupId>org.springframework.security</groupId>
                  <artifactId>spring-security-core</artifactId>
                  <version>5.7.14</version>
              </dependency>
              <dependency>
                  <groupId>org.springframework.security</groupId>
                  <artifactId>spring-security-oauth2-authorization-server</artifactId>
                  <version>0.3.1</version>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security5.UseNewRequestMatchers
examples:
- description: ''
  sources:
  - before: |
      package com.example;

      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.web.SecurityFilterChain;

      @Configuration
      @EnableWebSecurity
      class SecurityConfig {
          @Bean
          SecurityFilterChain securityFilterChain(HttpSecurity http) {
              http.authorizeHttpRequests(authz -> authz.mvcMatchers("/static/**").permitAll());
              return http.build();
          }
      }
    after: |
      package com.example;

      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.web.SecurityFilterChain;

      @Configuration
      @EnableWebSecurity
      class SecurityConfig {
          @Bean
          SecurityFilterChain securityFilterChain(HttpSecurity http) {
              http.authorizeHttpRequests(authz -> authz.requestMatchers("/static/**").permitAll());
              return http.build();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security5.UseNewSecurityMatchers
examples:
- description: ''
  sources:
  - before: |
      package com.example;

      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.web.SecurityFilterChain;

      @Configuration
      @EnableWebSecurity
      class SecurityConfig {
          @Bean
          SecurityFilterChain securityFilterChain(HttpSecurity http) {
              http
                      .antMatcher("/static/**")
                      .authorizeHttpRequests((authz) -> authz
                              .mvcMatchers("/static/**").permitAll()
                      );
              return http.build();
          }
      }
    after: |
      package com.example;

      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.web.SecurityFilterChain;

      @Configuration
      @EnableWebSecurity
      class SecurityConfig {
          @Bean
          SecurityFilterChain securityFilterChain(HttpSecurity http) {
              http
                      .securityMatcher("/static/**")
                      .authorizeHttpRequests((authz) -> authz
                              .mvcMatchers("/static/**").permitAll()
                      );
              return http.build();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security5.WebSecurityConfigurerAdapter
examples:
- description: ''
  sources:
  - before: |
      package com.example.websecuritydemo;

      import static org.springframework.security.config.Customizer.withDefaults;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;

      @Configuration
      public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                  .authorizeHttpRequests((authz) -> authz
                      .anyRequest().authenticated()
                  )
                  .httpBasic(withDefaults());
          }

          void someMethod() {}

      }
    after: |
      package com.example.websecuritydemo;

      import static org.springframework.security.config.Customizer.withDefaults;

      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.web.SecurityFilterChain;

      @Configuration
      public class SecurityConfiguration {

          @Bean
          SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
              http
                  .authorizeHttpRequests((authz) -> authz
                      .anyRequest().authenticated()
                  )
                  .httpBasic(withDefaults());
              return http.build();
          }

          void someMethod() {}

      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security6.ApplyToWithLambdaDsl
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer;
      import org.springframework.security.web.SecurityFilterChain;

      public class MySecurityConfig {
          public SecurityFilterChain configure(HttpSecurity http) {
              return http
                      .apply(new SessionManagementConfigurer<>())
                      .invalidSessionUrl("junk").and()
                      .build();
          }
      }
    after: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer;
      import org.springframework.security.web.SecurityFilterChain;

      public class MySecurityConfig {
          public SecurityFilterChain configure(HttpSecurity http) {
              return http
                      .with(new SessionManagementConfigurer<>(), configurer -> configurer
                              .invalidSessionUrl("junk"))
                      .build();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security6.PropagateAuthenticationServiceExceptions
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.web.authentication.AuthenticationEntryPointFailureHandler;

      class T {
          void m() {
              AuthenticationEntryPointFailureHandler handler = null;
              handler.setRethrowAuthenticationServiceException(true);
          }
      }
    after: |
      import org.springframework.security.web.authentication.AuthenticationEntryPointFailureHandler;

      class T {
          void m() {
              AuthenticationEntryPointFailureHandler handler = null;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security6.RemoveFilterSecurityInterceptorOncePerRequest
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.http.HttpMethod;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.web.SecurityFilterChain;

      @Configuration
      @EnableWebSecurity
      public class SecurityConfig {
          @Bean
          SecurityFilterChain web(HttpSecurity http) throws Exception {
              http
                  .authorizeRequests((authorize) -> authorize
                      .filterSecurityInterceptorOncePerRequest(false)
                      .requestMatchers(HttpMethod.GET, "/static/**")
                      .permitAll()
                  );
              return http.build();
          }
      }
    after: |
      import org.springframework.http.HttpMethod;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.web.SecurityFilterChain;

      @Configuration
      @EnableWebSecurity
      public class SecurityConfig {
          @Bean
          SecurityFilterChain web(HttpSecurity http) throws Exception {
              http
                  .authorizeRequests((authorize) -> authorize
                      .requestMatchers(HttpMethod.GET, "/static/**")
                      .permitAll()
                  );
              return http.build();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security6.RemoveOauth2LoginConfig
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.web.SecurityFilterChain;

      import java.util.HashSet;
      import java.util.Set;

      @Configuration
      @EnableWebSecurity
      public class SecurityConfig {
          @Bean
          public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
              http.authorizeHttpRequests(authorize -> authorize
                      .requestMatchers("/public", "/public/*").permitAll()
                      .requestMatchers("/login").permitAll()
                      .anyRequest().authenticated())
                  .oauth2Login()
                  .userInfoEndpoint()
                      .userAuthoritiesMapper(null);
              return http.build();
          }
      }
    after: |
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.web.SecurityFilterChain;

      import java.util.HashSet;
      import java.util.Set;

      @Configuration
      @EnableWebSecurity
      public class SecurityConfig {
          @Bean
          public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
              http.authorizeHttpRequests(authorize -> authorize
                      .requestMatchers("/public", "/public/*").permitAll()
                      .requestMatchers("/login").permitAll()
                      .anyRequest().authenticated());
              return http.build();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security6.RequireExplicitSavingOfSecurityContextRepository
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.web.SecurityFilterChain;

      class T {
          public SecurityFilterChain chain(HttpSecurity http) {
              http.securityContext((securityContext) -> securityContext
                      .requireExplicitSave(true)
                      .requireExplicitSave(false)
                  );
              return http.build();
          }
      }
    after: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.web.SecurityFilterChain;

      class T {
          public SecurityFilterChain chain(HttpSecurity http) {
              http.securityContext((securityContext) -> securityContext
                      .requireExplicitSave(false)
                  );
              return http.build();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security6.UpdateEnableReactiveMethodSecurity
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.config.annotation.method.configuration.EnableReactiveMethodSecurity;

      @EnableReactiveMethodSecurity(useAuthorizationManager = true)
      class SecurityConfig {
      }
    after: |
      import org.springframework.security.config.annotation.method.configuration.EnableReactiveMethodSecurity;

      @EnableReactiveMethodSecurity
      class SecurityConfig {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security6.UpdateRequestCache
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.web.SecurityFilterChain;
      import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
      import org.springframework.security.web.savedrequest.HttpSessionRequestCache;

      @Configuration
      @EnableWebSecurity
      public class SecurityConfig {

          @Bean
          public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
              HttpSessionRequestCache requestCache = new HttpSessionRequestCache();

              http.authorizeHttpRequests(authorize -> authorize
                      .requestMatchers("/public", "/public/*").permitAll()
                      .requestMatchers("/login").permitAll()
                      .anyRequest().authenticated())
                  .oauth2Login(oauth2 -> oauth2
                      .failureHandler(new SimpleUrlAuthenticationFailureHandler("/auth-error")))
                  .requestCache((cache) -> cache
                      .requestCache(requestCache));

              return http.build();
          }
      }
    after: |
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.web.SecurityFilterChain;
      import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
      import org.springframework.security.web.savedrequest.HttpSessionRequestCache;

      @Configuration
      @EnableWebSecurity
      public class SecurityConfig {

          @Bean
          public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
              HttpSessionRequestCache requestCache = new HttpSessionRequestCache();
              requestCache.setMatchingRequestParameterName("continue");

              http.authorizeHttpRequests(authorize -> authorize
                      .requestMatchers("/public", "/public/*").permitAll()
                      .requestMatchers("/login").permitAll()
                      .anyRequest().authenticated())
                  .oauth2Login(oauth2 -> oauth2
                      .failureHandler(new SimpleUrlAuthenticationFailureHandler("/auth-error")))
                  .requestCache((cache) -> cache
                      .requestCache(requestCache));

              return http.build();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security6.UseSha256InRememberMe
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.core.userdetails.UserDetailsService;
      import org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices;
      import org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices.RememberMeTokenAlgorithm;

      import static org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices.RememberMeTokenAlgorithm.SHA256;

      class T {
          void qualifiedFieldAccess(UserDetailsService userDetailsService) {
              TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices("key", userDetailsService, RememberMeTokenAlgorithm.SHA256);
          }
          void staticImport(UserDetailsService userDetailsService) {
              TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices("key", userDetailsService, SHA256);
          }
          void localVariable(UserDetailsService userDetailsService) {
              final RememberMeTokenAlgorithm encodingAlgorithm = RememberMeTokenAlgorithm.SHA256;
              TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices("key", userDetailsService, encodingAlgorithm);
          }
          void classField(UserDetailsService userDetailsService) {
              TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices("key", userDetailsService, encodingAlgorithm);
          }
          void constantInOtherClass(UserDetailsService userDetailsService) {
              TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices("key", userDetailsService, X.ALGORITHM);
          }
          final RememberMeTokenAlgorithm encodingAlgorithm = RememberMeTokenAlgorithm.SHA256;
      }
      class X {
          static final RememberMeTokenAlgorithm ALGORITHM = RememberMeTokenAlgorithm.SHA256;
      }
    after: |
      import org.springframework.security.core.userdetails.UserDetailsService;
      import org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices;
      import org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices.RememberMeTokenAlgorithm;

      import static org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices.RememberMeTokenAlgorithm.SHA256;

      class T {
          void qualifiedFieldAccess(UserDetailsService userDetailsService) {
              TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices("key", userDetailsService);
          }
          void staticImport(UserDetailsService userDetailsService) {
              TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices("key", userDetailsService);
          }
          void localVariable(UserDetailsService userDetailsService) {
              final RememberMeTokenAlgorithm encodingAlgorithm = RememberMeTokenAlgorithm.SHA256;
              TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices("key", userDetailsService);
          }
          void classField(UserDetailsService userDetailsService) {
              TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices("key", userDetailsService);
          }
          void constantInOtherClass(UserDetailsService userDetailsService) {
              TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices("key", userDetailsService, X.ALGORITHM);
          }
          final RememberMeTokenAlgorithm encodingAlgorithm = RememberMeTokenAlgorithm.SHA256;
      }
      class X {
          static final RememberMeTokenAlgorithm ALGORITHM = RememberMeTokenAlgorithm.SHA256;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security6.oauth2.client.OAuth2ClientLambdaDsl
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class ConventionalSecurityConfig extends WebSecurityConfigurerAdapter {
          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                      .oauth2Client(client -> client
                              .authorizationCodeGrant()
                                      .accessTokenResponseClient(null));
          }
      }
    after: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class ConventionalSecurityConfig extends WebSecurityConfigurerAdapter {
          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                      .oauth2Client(client -> client
                              .authorizationCodeGrant(grant -> grant
                                      .accessTokenResponseClient(null)));
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security6.oauth2.client.OAuth2LoginLambdaDsl
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class ConventionalSecurityConfig extends WebSecurityConfigurerAdapter {
          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                      .oauth2Login(login -> login
                              .tokenEndpoint()
                                      .accessTokenResponseClient(authorizationGrantRequest -> null)
                                      .and()
                              .userInfoEndpoint()
                                      .userAuthoritiesMapper(authorities -> null));
          }
      }
    after: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class ConventionalSecurityConfig extends WebSecurityConfigurerAdapter {
          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                      .oauth2Login(login -> login
                              .tokenEndpoint(endpoint -> endpoint
                                      .accessTokenResponseClient(authorizationGrantRequest -> null))
                              .userInfoEndpoint(endpoint -> endpoint
                                      .userAuthoritiesMapper(authorities -> null)));
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.security6.oauth2.server.resource.OAuth2ResourceServerLambdaDsl
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class ConventionalSecurityConfig extends WebSecurityConfigurerAdapter {
          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                      .oauth2ResourceServer(server -> server
                              .jwt()
                                      .jwkSetUri("")
                                      .and()
                              .opaqueToken()
                                      .introspectionUri(""));
          }
      }
    after: |
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

      @EnableWebSecurity
      public class ConventionalSecurityConfig extends WebSecurityConfigurerAdapter {
          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http
                      .oauth2ResourceServer(server -> server
                              .jwt(jwt -> jwt
                                      .jwkSetUri(""))
                              .opaqueToken(token -> token
                                      .introspectionUri("")));
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.spring.test.SpringRulesToJUnitExtension
examples:
- description: ''
  sources:
  - before: |
      import org.springframework.boot.test.context.SpringBootTest;
      import org.springframework.test.context.junit4.rules.SpringClassRule;
      import org.springframework.test.context.junit4.rules.SpringMethodRule;
      import org.junit.ClassRule;
      import org.junit.Rule;

      @SpringBootTest
      class SomeTest {

          @ClassRule
          public static final SpringClassRule springClassRule = new SpringClassRule();

          @Rule
          public final SpringMethodRule springMethodRule = new SpringMethodRule();

      }
    after: |
      import org.junit.jupiter.api.extension.ExtendWith;
      import org.springframework.boot.test.context.SpringBootTest;
      import org.springframework.test.context.junit.jupiter.SpringExtension;

      @ExtendWith(SpringExtension.class)
      @SpringBootTest
      class SomeTest {

      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.springdoc.MigrateSpringdocCommon
examples:
- description: ''
  sources:
  - before: |
      import io.swagger.v3.oas.models.OpenAPI;
      import org.springdoc.core.GroupedOpenApi;
      import org.springdoc.core.customizers.OpenApiCustomiser;

      public class OpenApiConfiguration {

          public static void groupedOpenApi() {
              GroupedOpenApi.builder()
                .group("group")
                .pathsToMatch("/api/**")
                .addOpenApiCustomiser(new FoobarOpenApiCustomiser())
                .build();
          }

          public static class FoobarOpenApiCustomiser implements OpenApiCustomiser {
              @Override
              public void customise(OpenAPI openApi) {
              }
          }
      }
    after: |
      import io.swagger.v3.oas.models.OpenAPI;
      import org.springdoc.core.customizers.OpenApiCustomizer;
      import org.springdoc.core.models.GroupedOpenApi;

      public class OpenApiConfiguration {

          public static void groupedOpenApi() {
              GroupedOpenApi.builder()
                .group("group")
                .pathsToMatch("/api/**")
                .addOpenApiCustomizer(new FoobarOpenApiCustomiser())
                .build();
          }

          public static class FoobarOpenApiCustomiser implements OpenApiCustomizer {
              @Override
              public void customise(OpenAPI openApi) {
              }
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.springdoc.UpgradeSpringDoc_2
examples:
- description: ''
  sources:
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>org.example</groupId>
          <artifactId>example</artifactId>
          <version>1.0-SNAPSHOT</version>
          <dependencies>
              <dependency>
                  <groupId>org.springdoc</groupId>
                  <artifactId>springdoc-openapi</artifactId>
                  <version>1.5.13</version>
              </dependency>
              <dependency>
                  <groupId>org.springdoc</groupId>
                  <artifactId>springdoc-openapi-common</artifactId>
                  <version>1.5.13</version>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.maven.spring.UpgradeExplicitSpringBootDependencies
examples:
- description: ''
  parameters:
  - 2.7.X
  - 3.0.0-M3
  sources:
  - before: |
      <project>
          <groupId>com.example</groupId>
          <artifactId>explicit-deps-app</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <repositories>
              <repository>
                  <id>spring-milestone</id>
                  <url>https://repo.spring.io/milestone</url>
                  <snapshots>
                      <enabled>false</enabled>
                  </snapshots>
              </repository>
          </repositories>
          <dependencies>
              <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-web</artifactId>
                  <version>2.7.3</version>
              </dependency>
              <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-test</artifactId>
                  <version>2.7.3</version>
                  <scope>test</scope>
              </dependency>
          </dependencies>
      </project>
    after: |
      <project>
          <groupId>com.example</groupId>
          <artifactId>explicit-deps-app</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <repositories>
              <repository>
                  <id>spring-milestone</id>
                  <url>https://repo.spring.io/milestone</url>
                  <snapshots>
                      <enabled>false</enabled>
                  </snapshots>
              </repository>
          </repositories>
          <dependencies>
              <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-web</artifactId>
                  <version>3.0.0-M3</version>
              </dependency>
              <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-test</artifactId>
                  <version>3.0.0-M3</version>
                  <scope>test</scope>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
